{"version":3,"sources":["Artist.js","Track.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Artist","artist","images","followers","genres","name","className","src","url","alt","style","height","width","borderRadius","objectFit","marginLeft","marginTop","margin","paddingLeft","total","join","Track","state","playing","audio","playingPreviewUrl","playAudio","previewUrl","Audio","pause","setState","play","trackIcon","track","preview_url","tracks","this","props","map","album","id","key","onClick","Component","API_ADDRESS","Search","artistQuery","onchangeHnadle","event","target","value","handleKeyPress","SearchList","fetch","then","response","json","console","log","artists","items","catch","error","alert","message","type","placeholder","onChange","onKeyPress","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e19995a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Artist =({artist})=>{\r\nif(!artist){return null};\r\n    const {images,followers,genres,name}=artist;\r\n    return(\r\n        <div className='artist'>         \r\n            <img src={images[0].url} alt='profile'\r\n            style={{height:200,width:200,borderRadius:100,objectFit:'cover' ,marginLeft:-236,marginTop:27}}/>\r\n            <div style={{margin: -213,paddingLeft: 236}}>\r\n            <p>{name}</p>\r\n            <p>{followers.total} followers</p>\r\n            <p>{genres.join(',')}</p>\r\n          </div>\r\n       </div>\r\n    );\r\n}\r\nexport default Artist;","import React,{Component} from 'react';\r\n\r\nclass Track extends Component{\r\n    state ={playing:false,audio:null,playingPreviewUrl:null}\r\n    playAudio =previewUrl=>()=>{\r\n      const audio =new Audio(previewUrl);\r\n      if(!this.state.audio){\r\n          audio.play();\r\n          this.setState({playing :true,audio,playingPreviewUrl:previewUrl});\r\n      }else{\r\n          this.state.audio.pause();\r\n          if(this.state.playingPreviewUrl ===previewUrl){\r\n          this.setState({playing:false});\r\n          }else{\r\n              audio.play();\r\n              this.setState({audio,playingPreviewUrl:previewUrl});\r\n          }\r\n      }\r\n    }\r\n    trackIcon= track=>{\r\n        if(!track.preview_url){\r\n            return(<span>N/A</span>)\r\n        }\r\n        if(this.state.playing && this.state.playingPreviewUrl ===track.preview_url){\r\n            return <span> | |</span>\r\n        }\r\n        return <span>&#9654;</span>\r\n    }\r\n    render(){\r\n        const {tracks}= this.props; \r\n        return(\r\n            <div style={{margin:22}}>\r\n              {\r\n                  tracks.map(track =>{\r\n                      const {album,id,name,preview_url}=track\r\n                      return(\r\n                          <div key={id} onClick={this.playAudio(preview_url)}\r\n                          className='track'>\r\n                           <img src={album.images[0].url} alt=\"album\" \r\n                           className='track-image'/>\r\n                           <p className='track-text'>{name}</p>\r\n                           <p className='track-icon'>{this.trackIcon(track)}</p>\r\n                        </div>\r\n                      )\r\n                  })\r\n              }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Track;","import React ,{Component} from 'react';\r\nimport Artist from './Artist';\r\nimport Track from './Track';\r\nconst API_ADDRESS ='https://spotify-api-wrapper.appspot.com';\r\n\r\nclass Search extends Component {\r\n    state={artistQuery:'',artist:null,tracks:[]};\r\n    onchangeHnadle =(event) =>{\r\n        this.setState({artistQuery:event.target.value});\r\n     }\r\n\r\n    handleKeyPress =(event) =>{\r\n       if(event.key ==='Enter'){\r\n           this.SearchList();\r\n\r\n       }\r\n    }\r\n\r\n    SearchList =() =>{\r\n        fetch(`${API_ADDRESS}/artist/${this.state.artistQuery}`)\r\n        .then(response => response.json())\r\n        .then(json=>{\r\n            console.log('json', json);\r\n            if(json.artists.total >0){\r\n                const artist = json.artists.items[0];\r\n                this.setState({artist});\r\n                fetch(`${API_ADDRESS}/artist/${artist.id}/top-tracks`)\r\n                .then(response => response.json())\r\n                .then(json =>this.setState({tracks:json.tracks}))\r\n                .catch(error=>alert(error.message));\r\n            }\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n<div>\r\n        <div className='bg_img'>\r\n             <div className=\"left_side\"> \r\n             <h3>Music for everyone.</h3>\r\n             <input type=\"text\" className=\"search\"\r\n             placeholder='Enter Artist Name'\r\n             onChange={this.onchangeHnadle}\r\n             onKeyPress={this.handleKeyPress}/>\r\n             <button onClick={this.SearchList} className='search-button'>search</button>\r\n             <Artist artist={this.state.artist}/>\r\n             </div>\r\n        </div>\r\n        <div>      \r\n        <Track tracks={this.state.tracks}/>\r\n       </div>\r\n</div>\r\n               \r\n       );\r\n    }\r\n}\r\nexport default Search;","import React from 'react';\nimport Search from './Search';\n\nfunction App() {\n  return (\n   <Search/>  \n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}